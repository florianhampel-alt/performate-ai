# Performate AI - direnv configuration
# Professional development environment with tmux integration

# ==============================================================================
# ENVIRONMENT VARIABLES
# ==============================================================================
# Load .env file if it exists
if [ -f .env ]; then
    dotenv .env
fi

# Add Docker to PATH
export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"

# Project-specific environment
export PERFORMATE_AI_PROJECT_ROOT="$PWD"
export PERFORMATE_AI_LOGS_DIR="$PWD/logs"
export TMUX_TMPDIR="$PWD/logs/tmux"

# ==============================================================================
# TMUX SESSION MANAGEMENT
# ==============================================================================
# Function to start/attach tmux session
start_performate_session() {
    local session_name="performate-ai"
    
    # Check if tmux session exists
    if tmux has-session -t "$session_name" 2>/dev/null; then
        echo "üì± Attaching to existing tmux session: $session_name"
        tmux attach-session -t "$session_name"
    else
        echo "üÜï Creating new tmux session: $session_name"
        # Use project-specific tmux config
        tmux -f "$PWD/.tmux.conf" new-session -d -s "$session_name" -c "$PWD"
        
        # Set up windows with specific purposes
        tmux rename-window -t "$session_name:1" 'main'
        tmux new-window -t "$session_name" -n 'backend' -c "$PWD/backend"
        tmux new-window -t "$session_name" -n 'frontend' -c "$PWD/frontend"
        tmux new-window -t "$session_name" -n 'services' -c "$PWD"
        tmux new-window -t "$session_name" -n 'logs' -c "$PWD/logs"
        
        # Split panes in key windows
        # Backend window: Code + Server
        tmux select-window -t "$session_name:backend"
        tmux split-window -h -c "$PWD/backend"
        
        # Frontend window: Code + Dev Server
        tmux select-window -t "$session_name:frontend"
        tmux split-window -h -c "$PWD/frontend"
        
        # Services window: Docker + Monitoring
        tmux select-window -t "$session_name:services"
        tmux split-window -v -c "$PWD"
        tmux send-keys -t "$session_name:services.0" 'docker compose ps' Enter
        tmux send-keys -t "$session_name:services.1" 'docker compose logs -f --tail=50' Enter
        
        # Logs window: Multiple log streams
        tmux select-window -t "$session_name:logs"
        tmux split-window -h -c "$PWD/logs"
        tmux split-window -v -c "$PWD/logs"
        tmux select-pane -t 0
        tmux split-window -v -c "$PWD/logs"
        
        # Start with main window
        tmux select-window -t "$session_name:main"
        
        # Attach to session
        tmux attach-session -t "$session_name"
    fi
}

# ==============================================================================
# PROJECT ALIASES
# ==============================================================================
# Development shortcuts
alias pa-start="start_performate_session"
alias pa-status="docker compose ps"
alias pa-logs="docker compose logs -f"
alias pa-build="docker compose build"
alias pa-up="docker compose up -d"
alias pa-down="docker compose down"
alias pa-restart="docker compose restart"

# Testing shortcuts
alias pa-test-backend="cd backend && python -m pytest"
alias pa-test-frontend="cd frontend && npm test"
alias pa-lint="cd backend && black . && isort . && cd ../frontend && npm run lint:fix"

# ==============================================================================
# LOGGING SETUP
# ==============================================================================
# Enhanced shell history for this project
export HISTFILE="$PWD/logs/.zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_FIND_NO_DUPS

# ==============================================================================
# AUTO-START TMUX (OPTIONAL)
# ==============================================================================
# Uncomment to auto-start tmux when entering directory
# if [ -z "$TMUX" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
#     start_performate_session
# fi

# ==============================================================================
# STATUS DISPLAY
# ==============================================================================
echo "üöÄ Performate AI Professional Environment Loaded!"
echo "==================================================="
echo "‚úÖ Project Root: $PERFORMATE_AI_PROJECT_ROOT"
echo "‚úÖ Docker: $(docker --version 2>/dev/null | cut -d' ' -f3 | cut -d',' -f1 || echo "Not available")"
echo "‚úÖ tmux: $(tmux -V || echo "Not available")"
echo "‚úÖ OpenAI API Key: $([ -n "$OPENAI_API_KEY" ] && echo "Set (${#OPENAI_API_KEY} chars)" || echo "‚ö†Ô∏è  Not set")"
echo "‚úÖ Logs Directory: $PERFORMATE_AI_LOGS_DIR"
echo ""
echo "üéØ Quick Commands:"
echo "   pa-start    - Start/attach tmux session"
echo "   pa-up       - Start Docker services"
echo "   pa-status   - Show service status"
echo "   pa-logs     - Follow all logs"
echo ""
